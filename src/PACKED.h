#pragma once

#include "COMMON.h"

const u8 TEXTURE_ATLAS[] = 
{
  0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
  0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xa0,
  0x04, 0x03, 0x00, 0x00, 0x00, 0x01, 0x5e, 0x74, 0xbf, 0x00, 0x00, 0x00,
  0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x00, 0x0b,
  0x12, 0x01, 0xd2, 0xdd, 0x7e, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0x50, 0x4c,
  0x54, 0x45, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0xff, 0xff, 0xff, 0x60,
  0x60, 0x60, 0xff, 0xff, 0xff, 0xb1, 0x03, 0xf0, 0x56, 0x00, 0x00, 0x00,
  0x03, 0x74, 0x52, 0x4e, 0x53, 0x00, 0x00, 0x00, 0xfa, 0x76, 0xc4, 0xde,
  0x00, 0x00, 0x04, 0x99, 0x49, 0x44, 0x41, 0x54, 0x58, 0xc3, 0xed, 0x58,
  0x5b, 0x92, 0xdc, 0x36, 0x0c, 0xec, 0x0a, 0x70, 0x80, 0x1c, 0x21, 0x95,
  0x13, 0xa0, 0x0c, 0x1e, 0x00, 0x65, 0xf4, 0xfd, 0xcf, 0xe4, 0x0f, 0x10,
  0x14, 0xe7, 0xb1, 0x3b, 0xd2, 0x3a, 0xbb, 0x76, 0xb9, 0xc2, 0x8f, 0x91,
  0x38, 0x62, 0x0b, 0x00, 0xd9, 0x68, 0x50, 0x04, 0x3e, 0xd0, 0xc8, 0xe7,
  0xff, 0x6b, 0xd4, 0x75, 0x24, 0x00, 0x70, 0x1b, 0x4f, 0x02, 0x20, 0x4d,
  0x49, 0xdb, 0xc6, 0x93, 0xb1, 0xbd, 0x90, 0x9e, 0x80, 0x00, 0x50, 0x02,
  0x0c, 0x68, 0x21, 0x03, 0x00, 0x06, 0x49, 0xe8, 0xea, 0x16, 0xc0, 0x95,
  0x80, 0x4e, 0x53, 0x64, 0xdd, 0xae, 0x11, 0xa4, 0x92, 0x8d, 0x98, 0x2e,
  0x29, 0x53, 0x58, 0x00, 0xed, 0x17, 0xd6, 0x00, 0x89, 0x72, 0xa8, 0xfb,
  0x15, 0x4b, 0xbd, 0xa2, 0x7a, 0x0c, 0x0d, 0x35, 0xac, 0xb1, 0x81, 0x46,
  0x04, 0x9e, 0x01, 0x94, 0xd0, 0xd0, 0x8a, 0x34, 0x34, 0x6a, 0x80, 0xf8,
  0x20, 0xd3, 0xed, 0x16, 0x90, 0x80, 0x06, 0x18, 0x3b, 0x20, 0x31, 0x0c,
  0x80, 0xb8, 0x8f, 0x74, 0x37, 0x40, 0x6a, 0xee, 0x38, 0x8c, 0x0c, 0x40,
  0x43, 0x89, 0x0d, 0x20, 0x9c, 0x33, 0x2e, 0xee, 0xee, 0x06, 0x60, 0x84,
  0x66, 0xc5, 0x3a, 0xa3, 0x67, 0x00, 0x35, 0x4b, 0x00, 0x02, 0x0d, 0x30,
  0x77, 0x37, 0x33, 0x21, 0x01, 0xd2, 0x8e, 0x85, 0xab, 0x55, 0x3b, 0x00,
  0x83, 0x09, 0x00, 0x22, 0x22, 0x2e, 0x02, 0x65, 0x00, 0xca, 0x38, 0x00,
  0xbd, 0x70, 0x3d, 0x4b, 0x3a, 0xd7, 0x17, 0x66, 0x66, 0xf6, 0x04, 0x30,
  0xa9, 0x21, 0x35, 0xef, 0x76, 0x90, 0x46, 0x44, 0x00, 0x08, 0xad, 0x7e,
  0xf8, 0x9a, 0x7c, 0x30, 0x7c, 0x51, 0x6b, 0x9a, 0xcb, 0x9d, 0x45, 0xb9,
  0x21, 0xf7, 0xd1, 0x6f, 0x9a, 0xdf, 0x3f, 0xef, 0xbc, 0x18, 0x2c, 0x0a,
  0x38, 0x49, 0xfa, 0xc1, 0x29, 0x99, 0x73, 0x82, 0xbb, 0xe9, 0x45, 0x02,
  0xc0, 0x00, 0x06, 0x01, 0xe6, 0x62, 0xad, 0x0c, 0xba, 0x33, 0xed, 0x30,
  0x45, 0x77, 0x27, 0x81, 0x22, 0x28, 0x40, 0xab, 0x3c, 0x69, 0x40, 0x3d,
  0xb7, 0x65, 0x4a, 0xe8, 0x3e, 0x48, 0x6b, 0x80, 0x54, 0x9e, 0x58, 0x21,
  0xbe, 0x03, 0xf5, 0x1c, 0x80, 0xa6, 0xfb, 0x08, 0x68, 0xba, 0x33, 0x47,
  0x34, 0xa0, 0xf3, 0xa4, 0x69, 0xbe, 0x9e, 0x4b, 0x8e, 0x91, 0x39, 0x4c,
  0xd3, 0x07, 0x7d, 0x04, 0x02, 0x1a, 0x05, 0x50, 0x42, 0x63, 0xd2, 0xfc,
  0xdb, 0x7a, 0x4e, 0x53, 0x8d, 0x10, 0x8e, 0x70, 0xa6, 0x6b, 0x16, 0x40,
  0x56, 0x9e, 0x14, 0xcd, 0xbf, 0xfd, 0xab, 0xe9, 0x4c, 0x1f, 0x01, 0x09,
  0x35, 0x09, 0x35, 0x4d, 0x25, 0xd0, 0x2e, 0x1d, 0x79, 0x02, 0x73, 0x77,
  0xfc, 0xf5, 0x8f, 0xc6, 0xa0, 0x43, 0x03, 0x50, 0x90, 0x08, 0x08, 0x99,
  0xee, 0x33, 0x68, 0x12, 0x42, 0x06, 0x9c, 0xa6, 0x92, 0x62, 0xd5, 0x4f,
  0x73, 0x02, 0x90, 0x04, 0x86, 0x01, 0xa4, 0xbb, 0xd7, 0xb4, 0xea, 0xc8,
  0x00, 0x09, 0x71, 0x1a, 0x68, 0x36, 0xfb, 0x26, 0x4e, 0xab, 0xa5, 0x4d,
  0x00, 0x4a, 0xf7, 0xb9, 0x70, 0xa9, 0x31, 0x30, 0x08, 0x67, 0x3a, 0x28,
  0x5b, 0x3f, 0xfc, 0x19, 0x35, 0x4c, 0x4d, 0xa2, 0xa8, 0x01, 0x53, 0x7c,
  0xff, 0x5b, 0x4d, 0x42, 0x40, 0x92, 0x37, 0xfc, 0xdb, 0xc8, 0x45, 0x56,
  0xdf, 0x7d, 0xcf, 0x98, 0xa3, 0xff, 0x51, 0xbe, 0xf7, 0xf5, 0x74, 0x7d,
  0x98, 0xd7, 0xe9, 0x9a, 0x06, 0x35, 0x78, 0x5c, 0x01, 0x00, 0xa5, 0x84,
  0x2d, 0xa1, 0x9b, 0x76, 0xa3, 0x65, 0x67, 0x5d, 0xa7, 0xb8, 0xd9, 0xa3,
  0x6b, 0x33, 0x61, 0xb4, 0xde, 0xb0, 0x14, 0x11, 0x00, 0xd4, 0xdc, 0xf6,
  0xd9, 0x99, 0xa2, 0xcb, 0x52, 0xbb, 0x12, 0xc5, 0x0e, 0x2b, 0x00, 0x20,
  0x29, 0x00, 0x62, 0x98, 0xa4, 0x62, 0xb1, 0x74, 0x0a, 0x97, 0x02, 0x18,
  0x65, 0x69, 0x79, 0x30, 0x68, 0x80, 0x46, 0x02, 0x43, 0x43, 0x03, 0x23,
  0xa1, 0xa1, 0x95, 0x7e, 0xa1, 0xd3, 0xc2, 0xe6, 0x52, 0x32, 0x03, 0x60,
  0x84, 0x86, 0xce, 0x44, 0x24, 0xa9, 0xb5, 0x46, 0x55, 0x84, 0xc6, 0xee,
  0x92, 0x0e, 0x0e, 0x3c, 0x07, 0x44, 0x59, 0x60, 0x60, 0x77, 0xa9, 0x0c,
  0x3c, 0x75, 0x89, 0xca, 0xd0, 0x62, 0x56, 0xb9, 0xa4, 0x11, 0x40, 0x19,
  0x78, 0x08, 0x5a, 0x18, 0x60, 0xd5, 0xec, 0xe8, 0xd9, 0xa9, 0xbc, 0xd1,
  0x8c, 0x3b, 0xd2, 0xf5, 0xb4, 0xc6, 0x2c, 0xd3, 0x2d, 0x38, 0x75, 0xcf,
  0x18, 0xcf, 0x39, 0xa5, 0x0c, 0x32, 0x1a, 0x10, 0x07, 0x80, 0xf7, 0x5b,
  0x84, 0x45, 0x8d, 0xdd, 0xc2, 0x72, 0x49, 0x46, 0xbc, 0x45, 0xbe, 0xda,
  0x11, 0x28, 0x19, 0xd4, 0x00, 0xa8, 0x41, 0x8d, 0x1b, 0xe9, 0xbe, 0x4c,
  0xef, 0x9f, 0x6d, 0x9b, 0x1d, 0x5d, 0xd9, 0x7b, 0x5b, 0xc5, 0xa6, 0x7f,
  0x6a, 0x23, 0x6f, 0x1d, 0x9b, 0xf7, 0xf4, 0x06, 0x58, 0xfd, 0x31, 0xfb,
  0x92, 0x9c, 0x35, 0x62, 0xaf, 0x19, 0xd0, 0xac, 0x75, 0x12, 0xe6, 0x7c,
  0x28, 0x63, 0x0e, 0x1a, 0xab, 0x1e, 0x74, 0x19, 0x60, 0x80, 0xb5, 0x61,
  0x80, 0x30, 0xd4, 0x6a, 0xa0, 0x97, 0x92, 0x41, 0xc1, 0xc4, 0xe4, 0x20,
  0xd6, 0x4d, 0x6b, 0xcf, 0xf0, 0xd0, 0x52, 0x3e, 0x19, 0xa4, 0x57, 0xb4,
  0x6a, 0x5d, 0x71, 0x1a, 0x10, 0x70, 0x3a, 0x9d, 0x10, 0x3a, 0x59, 0x29,
  0x6d, 0xac, 0xd2, 0xa5, 0xa5, 0xb3, 0xb5, 0x6b, 0xab, 0x1d, 0x8c, 0x12,
  0x0d, 0x50, 0x92, 0x1c, 0x01, 0x40, 0xa8, 0x6d, 0xc0, 0x62, 0xcc, 0x99,
  0xd1, 0xd0, 0xde, 0x9b, 0x55, 0xc0, 0x50, 0x90, 0xc5, 0xef, 0xc1, 0x68,
  0x03, 0xba, 0xd6, 0xa1, 0x01, 0x00, 0xdc, 0xdd, 0xdd, 0xa1, 0x20, 0x73,
  0x2a, 0x28, 0xa5, 0x0d, 0x6c, 0x0b, 0xb0, 0x96, 0xc3, 0x00, 0x81, 0x40,
  0x49, 0xcf, 0x29, 0xb1, 0x35, 0x0f, 0x37, 0x02, 0x31, 0x63, 0xd8, 0x01,
  0xa1, 0x9e, 0xcd, 0xea, 0xe9, 0x49, 0x1c, 0x7c, 0xe7, 0xb1, 0x89, 0x9d,
  0x80, 0xd2, 0x84, 0x5a, 0xf8, 0x74, 0x81, 0x61, 0xec, 0x09, 0xb2, 0x01,
  0x66, 0x0c, 0x80, 0x34, 0x40, 0xdc, 0xec, 0x56, 0x32, 0x7b, 0xa5, 0xbf,
  0x8a, 0xee, 0x78, 0x4c, 0x2f, 0x89, 0x93, 0x80, 0x06, 0x4d, 0x39, 0xed,
  0x08, 0xac, 0xf4, 0x15, 0xcc, 0x37, 0x00, 0x53, 0x4e, 0x19, 0xaf, 0x00,
  0x87, 0xae, 0xb4, 0x54, 0x9c, 0x03, 0x28, 0x57, 0x99, 0x8e, 0x77, 0x00,
  0x9b, 0x36, 0xa6, 0x35, 0xa0, 0x8a, 0x49, 0x01, 0x38, 0xf7, 0x7e, 0x7d,
  0x5d, 0x31, 0xc8, 0xfa, 0x68, 0xaa, 0xdc, 0x7c, 0x0f, 0xb0, 0x88, 0x90,
  0x0d, 0xc8, 0xb7, 0x01, 0x5b, 0x73, 0xc6, 0x04, 0xa4, 0x1d, 0x2e, 0xb9,
  0x33, 0xdd, 0x8f, 0x7c, 0xd8, 0x04, 0xb9, 0xa7, 0x75, 0x66, 0xea, 0xf3,
  0xa0, 0x75, 0xea, 0xed, 0x3e, 0xad, 0x69, 0x38, 0x05, 0x98, 0x3a, 0x38,
  0xc7, 0x9f, 0x00, 0xd4, 0xa7, 0x06, 0x7a, 0x57, 0x20, 0x6e, 0x73, 0x87,
  0x70, 0xb3, 0xd9, 0xd9, 0x5d, 0x3a, 0x47, 0xd6, 0xdb, 0x2a, 0x74, 0xa1,
  0xf9, 0x5d, 0xb3, 0xc7, 0x57, 0x3f, 0x07, 0x74, 0x04, 0x2f, 0x01, 0x83,
  0xbd, 0xc4, 0x5f, 0x05, 0xc0, 0xff, 0x80, 0x3f, 0x03, 0x30, 0xf7, 0x7e,
  0xa7, 0x01, 0x3a, 0xab, 0xf6, 0x69, 0x00, 0x43, 0x79, 0xb3, 0xfd, 0x78,
  0x09, 0xa8, 0xcf, 0xbf, 0xd3, 0x80, 0xfa, 0x5e, 0xdc, 0xcf, 0x03, 0xfe,
  0x3b, 0x00, 0x9f, 0xb4, 0x5f, 0x0c, 0xf8, 0xfc, 0xa0, 0x3f, 0xb8, 0x0e,
  0xd7, 0x57, 0xfa, 0x32, 0x97, 0x2e, 0xb3, 0xf5, 0xcf, 0xcc, 0xe9, 0x3e,
  0x1b, 0x3b, 0x0d, 0xe8, 0xf3, 0xa4, 0xf3, 0x80, 0x79, 0xfa, 0x73, 0xba,
  0x3e, 0xf4, 0xb9, 0xc6, 0x05, 0x40, 0x7d, 0x29, 0x5e, 0x00, 0xd4, 0x99,
  0xe5, 0x15, 0x80, 0x18, 0x1e, 0xaa, 0xe9, 0xbb, 0x80, 0x77, 0xdb, 0x3d,
  0x59, 0x5f, 0xb4, 0xed, 0xe4, 0xf8, 0xec, 0xf8, 0xb2, 0x12, 0x67, 0xc7,
  0xc7, 0xdd, 0xcd, 0x2b, 0xff, 0xe3, 0x5a, 0xe4, 0x4f, 0x3e, 0x32, 0x5f,
  0x18, 0x78, 0xb3, 0xf3, 0xda, 0xc0, 0x29, 0x13, 0x7c, 0xb7, 0xfb, 0xca,
  0xc0, 0x09, 0x13, 0x97, 0x01, 0x7c, 0xf9, 0xc7, 0x4f, 0x02, 0x1e, 0x3d,
  0x78, 0xe1, 0xd3, 0xe7, 0x03, 0x78, 0xea, 0xaf, 0x5f, 0x03, 0x38, 0x5c,
  0xff, 0x2c, 0xc0, 0xef, 0x13, 0xf4, 0x6f, 0x48, 0x8d, 0xcf, 0xcf, 0x87,
  0x2f, 0xc8, 0xe9, 0xcb, 0x32, 0x73, 0x5d, 0xc8, 0x2e, 0x4b, 0xe5, 0x75,
  0x31, 0xbe, 0x2c, 0xf7, 0xd7, 0x0b, 0xca, 0xe5, 0x92, 0x75, 0xbd, 0x28,
  0xe2, 0xb1, 0xec, 0xfe, 0x00, 0x02, 0x11, 0xe6, 0x1b, 0x65, 0x7c, 0x86,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60,
  0x82
};

const u32 TEXTURE_ATLAS_LENGTH = (u32)std::size(TEXTURE_ATLAS);
const vec2 TEXTURE_ATLAS_SIZE = {96, 160};

enum AtlasType
{
  ATLAS_NONE,
  ATLAS_FOLDER,
  ATLAS_ROOT,
  ATLAS_LAYER,
  ATLAS_NULL,
  ATLAS_TRIGGERS,
  ATLAS_VISIBLE,
  ATLAS_INVISIBLE,
  ATLAS_SHOW_RECT,
  ATLAS_HIDE_RECT,
  ATLAS_SHOW_UNUSED,
  ATLAS_HIDE_UNUSED,
  ATLAS_PAN,
  ATLAS_MOVE,
  ATLAS_ROTATE,
  ATLAS_SCALE,
  ATLAS_CROP,
  ATLAS_DRAW,
  ATLAS_ERASE,
  ATLAS_COLOR_PICKER,
  ATLAS_UNDO,
  ATLAS_REDO,
  ATLAS_ANIMATION,
  ATLAS_SPRITESHEET,
  ATLAS_EVENT,
  ATLAS_PLAY,
  ATLAS_PAUSE,
  ATLAS_ADD,
  ATLAS_REMOVE,
  ATLAS_TRIGGER,
  ATLAS_PIVOT,
  ATLAS_SQUARE,
  ATLAS_CIRCLE,
  ATLAS_PICKER,
  ATLAS_FRAME,
  ATLAS_FRAME_ALT,
  ATLAS_TARGET,
  ATLAS_TARGET_ALT,
  ATLAS_COUNT
};

struct AtlasEntry
{
  vec2 position;
  vec2 size;
};

const vec2 ATLAS_SIZE_SMALL = {8, 8};
const vec2 ATLAS_SIZE_NORMAL = {16, 16};
const vec2 ATLAS_SIZE_OBLONG = {16, 40};
const vec2 ATLAS_SIZE_BIG = {40, 40};

const inline AtlasEntry ATLAS_ENTRIES[ATLAS_COUNT] = 
{
  {{  0,  0}, ATLAS_SIZE_NORMAL},
  {{ 16,  0}, ATLAS_SIZE_NORMAL},
  {{ 32,  0}, ATLAS_SIZE_NORMAL},
  {{ 48,  0}, ATLAS_SIZE_NORMAL},
  {{ 64,  0}, ATLAS_SIZE_NORMAL},
  {{ 80,  0}, ATLAS_SIZE_NORMAL},
  {{  0, 16}, ATLAS_SIZE_NORMAL},
  {{ 16, 16}, ATLAS_SIZE_NORMAL},
  {{ 32, 16}, ATLAS_SIZE_NORMAL},
  {{ 48, 16}, ATLAS_SIZE_NORMAL},
  {{ 64, 16}, ATLAS_SIZE_NORMAL},
  {{ 80, 16}, ATLAS_SIZE_NORMAL},
  {{  0, 32}, ATLAS_SIZE_NORMAL},
  {{ 16, 32}, ATLAS_SIZE_NORMAL},
  {{ 32, 32}, ATLAS_SIZE_NORMAL},
  {{ 48, 32}, ATLAS_SIZE_NORMAL},
  {{ 64, 32}, ATLAS_SIZE_NORMAL},
  {{ 80, 32}, ATLAS_SIZE_NORMAL},
  {{  0, 48}, ATLAS_SIZE_NORMAL},
  {{ 16, 48}, ATLAS_SIZE_NORMAL},
  {{ 32, 48}, ATLAS_SIZE_NORMAL},
  {{ 48, 48}, ATLAS_SIZE_NORMAL},
  {{ 64, 48}, ATLAS_SIZE_NORMAL},
  {{ 80, 48}, ATLAS_SIZE_NORMAL},
  {{  0, 64}, ATLAS_SIZE_NORMAL},
  {{ 16, 64}, ATLAS_SIZE_NORMAL},
  {{ 32, 64}, ATLAS_SIZE_NORMAL},
  {{ 48, 64}, ATLAS_SIZE_NORMAL},
  {{ 64, 64}, ATLAS_SIZE_NORMAL},
  {{ 80, 64}, ATLAS_SIZE_SMALL },
  {{ 88, 64}, ATLAS_SIZE_SMALL },
  {{ 80, 72}, ATLAS_SIZE_SMALL },
  {{ 88, 72}, ATLAS_SIZE_SMALL },
  {{ 0,  80}, ATLAS_SIZE_OBLONG},
  {{16,  80}, ATLAS_SIZE_OBLONG},
  {{32,  80}, ATLAS_SIZE_OBLONG},
  {{48,  80}, ATLAS_SIZE_BIG},
  {{48, 120}, ATLAS_SIZE_BIG}
};

#define ATLAS_POSITION(type) ATLAS_ENTRIES[type].position
#define ATLAS_SIZE(type) ATLAS_ENTRIES[type].size
#define ATLAS_UV_MIN(type) (ATLAS_POSITION(type) / TEXTURE_ATLAS_SIZE)
#define ATLAS_UV_MAX(type) ((ATLAS_POSITION(type) + ATLAS_SIZE(type)) / TEXTURE_ATLAS_SIZE)
#define ATLAS_UV_ARGS(type) ATLAS_UV_MIN(type), ATLAS_UV_MAX(type)
#define ATLAS_UV_VERTICES(type) UV_VERTICES(ATLAS_UV_MIN(type), ATLAS_UV_MAX(type))

struct ShaderData
{
  std::string vertex;
  std::string fragment;
};

enum ShaderType
{
    SHADER_LINE,
    SHADER_TEXTURE,
    SHADER_AXIS,
    SHADER_GRID,
    SHADER_COUNT
};

const std::string SHADER_VERTEX = R"(
#version 330 core
layout (location = 0) in vec2 i_position;
layout (location = 1) in vec2 i_uv;
out vec2 i_uv_out;
uniform mat4 u_transform;
void main()
{
    i_uv_out = i_uv;
    gl_Position = u_transform * vec4(i_position, 0.0, 1.0);
}
)";

const std::string SHADER_AXIS_VERTEX = R"(
#version 330 core
layout (location = 0) in vec2 i_position; // full screen line segment: -1..1
uniform vec2 u_origin_ndc; // world origin in NDC
uniform int u_axis;       // 0 = X axis, 1 = Y axis

void main()
{
    vec2 pos = (u_axis == 0) 
        ? vec2(i_position.x, u_origin_ndc.y) // horizontal line across screen
        : vec2(u_origin_ndc.x, i_position.x); // vertical line across screen;

    gl_Position = vec4(pos, 0.0, 1.0);
}
)";

const std::string SHADER_GRID_VERTEX = R"(
#version 330 core
layout ( location = 0 ) in vec2 i_position;
out vec2 clip;

void main() {
    clip = i_position;
    gl_Position = vec4(i_position, 0.0, 1.0);
}
)";

const std::string SHADER_FRAGMENT = R"(
#version 330 core
out vec4 o_fragColor;
uniform vec4 u_color;
void main()
{
    o_fragColor = u_color;
}
)";

const std::string SHADER_TEXTURE_FRAGMENT = R"(
#version 330 core
in vec2 i_uv_out;
uniform sampler2D u_texture;
uniform vec4 u_tint;
uniform vec3 u_color_offset;
out vec4 o_fragColor;
void main()
{
    vec4 texColor = texture(u_texture, i_uv_out);
    texColor *= u_tint;
    texColor.rgb += u_color_offset;
    o_fragColor = texColor;
}
)";

const std::string SHADER_GRID_FRAGMENT = R"(
#version 330 core
in vec2 clip;

uniform mat4 u_model;
uniform vec2 u_size; 
uniform vec2 u_offset;
uniform vec4 u_color;

out vec4 o_fragColor;

void main() 
{
    vec4 w = u_model * vec4(clip, 0.0, 1.0);
    w /= w.w;
    vec2 world = w.xy;

    vec2 g = (world - u_offset) / u_size;

    vec2 d = abs(fract(g) - 0.5);
    float distance = min(d.x, d.y);

    float fw = min(fwidth(g.x), fwidth(g.y));
    float alpha = 1.0 - smoothstep(0.0, fw, distance);

    if (alpha <= 0.0) discard;
    o_fragColor = vec4(u_color.rgb, u_color.a * alpha);
}
)";

#define SHADER_UNIFORM_AXIS "u_axis"
#define SHADER_UNIFORM_COLOR "u_color"
#define SHADER_UNIFORM_TRANSFORM "u_transform"
#define SHADER_UNIFORM_TINT "u_tint"
#define SHADER_UNIFORM_COLOR_OFFSET "u_color_offset"
#define SHADER_UNIFORM_OFFSET "u_offset"
#define SHADER_UNIFORM_ORIGIN_NDC "u_origin_ndc"
#define SHADER_UNIFORM_SIZE "u_size"
#define SHADER_UNIFORM_MODEL "u_model"
#define SHADER_UNIFORM_TEXTURE "u_texture"

const ShaderData SHADER_DATA[SHADER_COUNT] = 
{
  {SHADER_VERTEX, SHADER_FRAGMENT},
  {SHADER_VERTEX, SHADER_TEXTURE_FRAGMENT},
  {SHADER_AXIS_VERTEX, SHADER_FRAGMENT},
  {SHADER_GRID_VERTEX, SHADER_GRID_FRAGMENT}
};
