#pragma once

#include "COMMON.h"

static const unsigned int TEXTURE_ATLAS_LENGTH = 916;
static const unsigned char TEXTURE_ATLAS[] = 
{
  0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
  0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x68,
  0x02, 0x03, 0x00, 0x00, 0x00, 0x73, 0xa5, 0x1d, 0xc6, 0x00, 0x00, 0x00,
  0x09, 0x50, 0x4c, 0x54, 0x45, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x60,
  0x60, 0x60, 0x13, 0x5e, 0x42, 0xae, 0x00, 0x00, 0x00, 0x01, 0x74, 0x52,
  0x4e, 0x53, 0x00, 0x40, 0xe6, 0xd8, 0x66, 0x00, 0x00, 0x03, 0x39, 0x49,
  0x44, 0x41, 0x54, 0x48, 0xc7, 0xcd, 0x95, 0xcf, 0x6b, 0x14, 0x31, 0x14,
  0xc7, 0xbf, 0x19, 0x26, 0xb2, 0xb3, 0xa7, 0x11, 0x26, 0xcb, 0xea, 0x69,
  0x90, 0x46, 0xb4, 0x7f, 0x45, 0x0a, 0xf5, 0xe0, 0x2d, 0x42, 0xde, 0x30,
  0x9d, 0xd3, 0x28, 0x56, 0xa4, 0x7f, 0x45, 0x0e, 0x0a, 0xf5, 0xe6, 0x61,
  0x47, 0xaa, 0xa7, 0x22, 0xac, 0xb4, 0xf3, 0x57, 0x9a, 0x97, 0x34, 0x16,
  0x71, 0x57, 0x29, 0x82, 0xf8, 0x20, 0xbb, 0x2f, 0xf3, 0x79, 0xf9, 0xbe,
  0x1f, 0x19, 0x76, 0xf1, 0x7b, 0x13, 0x06, 0xa8, 0x46, 0xc8, 0xbc, 0xd7,
  0x3d, 0x92, 0x29, 0x07, 0x48, 0x0b, 0xf9, 0x0d, 0x2d, 0xd8, 0x88, 0xf8,
  0x73, 0x22, 0x41, 0x64, 0x18, 0x2c, 0x15, 0xea, 0x28, 0x60, 0xa5, 0x89,
  0x58, 0x11, 0xb9, 0x28, 0xa5, 0x5e, 0x59, 0x96, 0x91, 0xf3, 0xd6, 0x02,
  0x85, 0x41, 0x04, 0xc2, 0x04, 0x40, 0xb6, 0x20, 0xf2, 0x7a, 0x9e, 0xfa,
  0x98, 0x98, 0xa5, 0x32, 0x10, 0x67, 0xd7, 0x66, 0x35, 0x77, 0x1b, 0x34,
  0xc2, 0xe0, 0x70, 0xea, 0xae, 0x6e, 0xc0, 0xf8, 0xf8, 0xf3, 0x9b, 0x8b,
  0xd5, 0xf5, 0xb0, 0xc1, 0xaa, 0xf2, 0x38, 0xbc, 0x3e, 0xbb, 0x8a, 0xda,
  0x17, 0x64, 0xfa, 0xfb, 0xc7, 0x7a, 0xb3, 0x3d, 0x5b, 0x41, 0x4b, 0xa0,
  0x98, 0x67, 0x8f, 0xcd, 0x0a, 0x12, 0x9f, 0x70, 0xb0, 0x3e, 0x58, 0xaf,
  0x14, 0x36, 0x90, 0x01, 0x2c, 0xe6, 0xab, 0x73, 0x6d, 0x65, 0x2f, 0xb9,
  0x54, 0x69, 0x8d, 0xee, 0xe6, 0x1e, 0x55, 0x07, 0x3c, 0x7a, 0xf4, 0xb5,
  0x55, 0x46, 0x38, 0x06, 0xc5, 0x58, 0x79, 0x39, 0xcc, 0x16, 0xc2, 0x01,
  0x38, 0x3f, 0xf7, 0x19, 0x60, 0xea, 0x20, 0x86, 0xad, 0x01, 0x2c, 0xc2,
  0x91, 0x16, 0xda, 0x17, 0x2c, 0x95, 0x8c, 0x28, 0x7b, 0x3e, 0x3b, 0xb7,
  0x43, 0xdc, 0x6f, 0xd2, 0x72, 0xf7, 0x3b, 0x00, 0x51, 0x86, 0xfc, 0x9d,
  0xa5, 0xd2, 0x88, 0xf3, 0x7d, 0xf0, 0xaa, 0x88, 0xc6, 0x25, 0xd1, 0x25,
  0x64, 0xd8, 0x71, 0x74, 0x86, 0xf7, 0x80, 0x8f, 0x95, 0x95, 0x7c, 0x9d,
  0x2a, 0x82, 0x2c, 0x59, 0x02, 0xb5, 0xf4, 0xc1, 0x69, 0xe0, 0x9a, 0x52,
  0x98, 0x9a, 0x47, 0x9f, 0x81, 0x86, 0xea, 0xd1, 0x08, 0xdb, 0x34, 0xd5,
  0xd8, 0x48, 0x22, 0x9b, 0x01, 0x07, 0xa3, 0x91, 0xa6, 0x21, 0x4a, 0xd7,
  0x9b, 0x01, 0x07, 0xa3, 0x51, 0x88, 0x80, 0x1f, 0x32, 0x0c, 0xa0, 0xe5,
  0x60, 0x48, 0x07, 0xcb, 0x52, 0x0c, 0x58, 0x2e, 0x00, 0x0e, 0x8e, 0x7b,
  0xcb, 0xc9, 0xd9, 0xe1, 0x02, 0xca, 0xe0, 0x68, 0xb7, 0xec, 0x53, 0x83,
  0xb9, 0x6b, 0x22, 0x94, 0x78, 0xf0, 0x5a, 0xda, 0xc3, 0x3e, 0x6e, 0x32,
  0xe0, 0x26, 0xef, 0xe1, 0xe5, 0xf3, 0xca, 0x6e, 0xcf, 0xf2, 0x83, 0xdb,
  0x91, 0xf4, 0xeb, 0x83, 0x25, 0xd1, 0x22, 0x4f, 0x38, 0x0f, 0x32, 0x6d,
  0xf4, 0x70, 0x79, 0xfb, 0xb6, 0xff, 0xc6, 0x7e, 0x09, 0xba, 0x8a, 0xfb,
  0x67, 0x8d, 0xbd, 0x91, 0xcd, 0x7e, 0x11, 0xc0, 0x13, 0xd4, 0x91, 0x7e,
  0x18, 0xa1, 0x5c, 0xf2, 0x81, 0x75, 0x00, 0x5b, 0xd4, 0x82, 0x8e, 0x51,
  0x9c, 0x72, 0x24, 0x03, 0x1e, 0xc0, 0x69, 0x8b, 0x62, 0x32, 0x40, 0x00,
  0x98, 0x6c, 0xbc, 0xd6, 0x08, 0xc4, 0xe4, 0xb1, 0xa4, 0xb1, 0x46, 0x80,
  0x42, 0x8e, 0xe5, 0xc5, 0xe3, 0x3a, 0x49, 0xdd, 0xeb, 0x0c, 0x9e, 0xd2,
  0x65, 0xcd, 0x27, 0x4a, 0xe1, 0x9b, 0xb1, 0x6a, 0x92, 0xd4, 0x83, 0x13,
  0xe0, 0x7d, 0xe7, 0x21, 0x4e, 0x8e, 0x51, 0x17, 0xa3, 0x3b, 0x3a, 0x52,
  0x49, 0xea, 0xf4, 0x35, 0x8a, 0x17, 0x03, 0x6a, 0x69, 0x0c, 0xcc, 0xbb,
  0x8f, 0x0c, 0x92, 0xd4, 0xf4, 0x11, 0x95, 0x7b, 0x0b, 0x45, 0x41, 0x08,
  0x35, 0x92, 0x94, 0x38, 0x86, 0x58, 0x19, 0x68, 0x6a, 0xb9, 0xfc, 0xb2,
  0x5c, 0x18, 0x70, 0xf2, 0xd8, 0xbe, 0x7c, 0x0e, 0x48, 0xf2, 0x0c, 0xf8,
  0x08, 0xb8, 0xdc, 0x9a, 0x77, 0x71, 0xa8, 0x84, 0x74, 0xa2, 0x04, 0x5b,
  0x02, 0x4f, 0x0d, 0x80, 0xee, 0xeb, 0x82, 0x41, 0x65, 0x11, 0x23, 0xa2,
  0xd4, 0x13, 0x0e, 0x39, 0x3c, 0xf7, 0xca, 0xbd, 0x30, 0x79, 0x88, 0xb2,
  0x61, 0x7f, 0xff, 0xd8, 0xf7, 0xb2, 0x82, 0x95, 0x17, 0xc0, 0x01, 0x57,
  0xc4, 0x2b, 0x80, 0x88, 0x06, 0x06, 0xef, 0x80, 0xf4, 0xc6, 0xf0, 0x4a,
  0x60, 0xc5, 0x51, 0xa3, 0x83, 0x48, 0x2f, 0x5c, 0x5c, 0x86, 0xfb, 0xf8,
  0x04, 0x14, 0xdd, 0x45, 0x70, 0x0c, 0x64, 0xaf, 0x2d, 0xaf, 0x04, 0x3c,
  0x50, 0x7d, 0xfb, 0xd2, 0x43, 0x01, 0xfc, 0x23, 0xc0, 0x2b, 0xa6, 0x5f,
  0x0e, 0x83, 0xd5, 0xdb, 0xc1, 0xa3, 0xf3, 0x50, 0x1e, 0x4e, 0xa1, 0x70,
  0xc2, 0xdc, 0x00, 0x45, 0x27, 0xa6, 0x20, 0x82, 0x02, 0x03, 0x04, 0x90,
  0xea, 0x6c, 0x6b, 0x3a, 0x81, 0xa0, 0x2e, 0x00, 0xe3, 0x94, 0x80, 0x03,
  0xdb, 0x72, 0x9e, 0x2f, 0x6b, 0x3a, 0x0d, 0x8e, 0x0b, 0x52, 0x2f, 0x9c,
  0x7a, 0x56, 0x38, 0xe5, 0xa4, 0xc5, 0x02, 0x6d, 0xab, 0x86, 0x00, 0x84,
  0x85, 0x36, 0xd4, 0x6b, 0x12, 0xbd, 0x0a, 0x28, 0x82, 0xe6, 0xe1, 0x6b,
  0xc4, 0x72, 0x1d, 0x59, 0x49, 0xca, 0xfe, 0x00, 0x50, 0x1b, 0x40, 0x03,
  0xc2, 0x71, 0x83, 0xca, 0x30, 0x88, 0x39, 0xa0, 0x03, 0x58, 0x03, 0x48,
  0x27, 0x10, 0xc1, 0xcf, 0x46, 0x4e, 0x11, 0x10, 0x93, 0xef, 0xb5, 0x39,
  0x98, 0x07, 0xe0, 0xff, 0x00, 0x6e, 0xef, 0x6f, 0x22, 0xea, 0xee, 0x0e,
  0xf0, 0xbf, 0x03, 0xe5, 0xf6, 0x00, 0xa2, 0xdd, 0x40, 0x1c, 0x1d, 0x99,
  0x9d, 0x40, 0x0a, 0x63, 0xef, 0x02, 0x14, 0x45, 0x73, 0x7b, 0xc1, 0x5f,
  0xe7, 0xc8, 0xe5, 0xde, 0xad, 0x41, 0x28, 0xf7, 0x3f, 0x5e, 0xd4, 0xbf,
  0x00, 0xc0, 0x1f, 0x81, 0x26, 0xea, 0x77, 0x02, 0xfe, 0xff, 0xde, 0x09,
  0x0a, 0x22, 0xef, 0x77, 0x01, 0x4c, 0x1d, 0x76, 0x03, 0xdd, 0xef, 0x01,
  0xd5, 0xb8, 0x07, 0x14, 0x7e, 0x27, 0xf8, 0x0e, 0xc6, 0xe6, 0x29, 0x49,
  0x20, 0x43, 0x4e, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44,
  0xae, 0x42, 0x60, 0x82
};

#define TEXTURE_COUNT (TEXTURE_TARGET + 1)
enum TextureType
{
  TEXTURE_ROOT,
  TEXTURE_LAYER,
  TEXTURE_NULL,
  TEXTURE_TRIGGERS,
  TEXTURE_VISIBLE,
  TEXTURE_INVISIBLE,
  TEXTURE_ERROR,
  TEXTURE_MOVE,
  TEXTURE_UP,
  TEXTURE_DOWN,
  TEXTURE_RECT,
  TEXTURE_RECT_HIDE,
  TEXTURE_DRAW,
  TEXTURE_ERASE,
  TEXTURE_SCALE,
  TEXTURE_COLOR,
  TEXTURE_PAN,
  TEXTURE_CROP,
  TEXTURE_ANIMATION,
  TEXTURE_SPRITESHEET,
  TEXTURE_EVENT,
  TEXTURE_ROTATE,
  TEXTURE_REDO,
  TEXTURE_TRIGGER,
  TEXTURE_PIVOT,
  TEXTURE_SQUARE,
  TEXTURE_CIRCLE,
  TEXTURE_PICKER,
  TEXTURE_FRAME,
  TEXTURE_FRAME_ALT,
  TEXTURE_TARGET
};

static const vec2 ATLAS_SIZE = {96, 104};
static const vec2 TEXTURE_SIZE = {16, 16};
static const vec2 TEXTURE_SIZE_SMALL = {8, 8};
static const vec2 TEXTURE_SIZE_BIG = {32, 32};
static const vec2 TEXTURE_SIZE_OBLONG = {16, 40};

#define ATLAS_UV(x,y){(f32)x / ATLAS_SIZE[0], (f32) y / ATLAS_SIZE[1]}
static const vec2 ATLAS_UVS[TEXTURE_COUNT][2] = 
{
  { ATLAS_UV(  0,  0), ATLAS_UV( 16, 16) }, /* 16 x 16 v */
  { ATLAS_UV( 16,  0), ATLAS_UV( 32, 16) },
  { ATLAS_UV( 32,  0), ATLAS_UV( 48, 16) },
  { ATLAS_UV( 48,  0), ATLAS_UV( 64, 16) },
  { ATLAS_UV( 64,  0), ATLAS_UV( 80, 16) },
  { ATLAS_UV( 80,  0), ATLAS_UV( 96, 16) },
  { ATLAS_UV(  0, 16), ATLAS_UV( 16, 32) },
  { ATLAS_UV( 16, 16), ATLAS_UV( 32, 32) },
  { ATLAS_UV( 32, 16), ATLAS_UV( 48, 32) },
  { ATLAS_UV( 48, 16), ATLAS_UV( 64, 32) },
  { ATLAS_UV( 64, 16), ATLAS_UV( 80, 32) },
  { ATLAS_UV( 80, 16), ATLAS_UV( 96, 32) },
  { ATLAS_UV(  0, 32), ATLAS_UV( 16, 48) },
  { ATLAS_UV( 16, 32), ATLAS_UV( 32, 48) },
  { ATLAS_UV( 32, 32), ATLAS_UV( 48, 48) },
  { ATLAS_UV( 48, 32), ATLAS_UV( 64, 48) },
  { ATLAS_UV( 64, 32), ATLAS_UV( 80, 48) },
  { ATLAS_UV( 80, 32), ATLAS_UV( 96, 48) },
  { ATLAS_UV(  0, 48), ATLAS_UV( 16, 64) },
  { ATLAS_UV( 16, 48), ATLAS_UV( 32, 64) },
  { ATLAS_UV( 32, 48), ATLAS_UV( 48, 64) },
  { ATLAS_UV( 48, 48), ATLAS_UV( 64, 64) },
  { ATLAS_UV( 64, 48), ATLAS_UV( 80, 64) }, 
  { ATLAS_UV( 80, 48), ATLAS_UV( 88, 56) }, /* 8 x 8 v */
  { ATLAS_UV( 88, 48), ATLAS_UV( 96, 56) },
  { ATLAS_UV( 80, 56), ATLAS_UV( 88, 64) },
  { ATLAS_UV( 88, 56), ATLAS_UV( 96, 64) },
  { ATLAS_UV(  0, 64), ATLAS_UV( 16,104) }, /* 16 x 40 */
  { ATLAS_UV( 16, 64), ATLAS_UV( 32,104) }, 
  { ATLAS_UV( 32, 64), ATLAS_UV( 48,104) }, 
  { ATLAS_UV( 48, 64), ATLAS_UV( 80, 96) }  /* 32 x 32 */ 
};

static const vec2 ATLAS_SIZES[TEXTURE_COUNT] = 
{
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE,
  TEXTURE_SIZE_SMALL,
  TEXTURE_SIZE_SMALL,
  TEXTURE_SIZE_SMALL,
  TEXTURE_SIZE_SMALL,
  TEXTURE_SIZE_OBLONG,
  TEXTURE_SIZE_OBLONG,
  TEXTURE_SIZE_OBLONG,
  TEXTURE_SIZE_BIG
};

#define IMVEC2_ATLAS_UV_GET(type) IMVEC2_VEC2(ATLAS_UVS[type][0]), IMVEC2_VEC2(ATLAS_UVS[type][1])
#define ATLAS_UV_VERTICES(type) UV_VERTICES(ATLAS_UVS[type][0], ATLAS_UVS[type][1])

/* Shaders */
struct ShaderData
{
  const char* vertex;
  const char* fragment;
};

#define SHADER_COUNT (SHADER_LINE_DOTTED + 1)
enum ShaderType
{
    SHADER_LINE,
    SHADER_TEXTURE,
    SHADER_LINE_DOTTED
};

static const char SHADER_VERTEX[] =  
"#version 330 core\n" \
"layout (location = 0) in vec2 i_position;\n" \
"layout (location = 1) in vec2 i_uv;\n" \
"\n" \
"out vec2 i_uv_out;\n" \
"\n" \
"uniform mat4 u_transform;\n" \
"\n" \
"void main()\n" \
"{\n" \
"    i_uv_out = i_uv;\n" \
"    gl_Position = u_transform * vec4(i_position, 0.0, 1.0);\n" \
"}\n";

static const char SHADER_TEXTURE_FRAGMENT[] =
"#version 330 core\n" \
"in vec2 i_uv_out;\n" \
"uniform sampler2D u_texture;\n" \
"uniform vec4 u_tint;\n" \
"uniform vec3 u_color_offset;\n" \
"out vec4 o_fragColor;\n" \
"void main()\n" \
"{\n" \
"    vec4 texColor = texture(u_texture, i_uv_out);\n" \
"    texColor *= u_tint;\n" \
"    texColor.rgb += u_color_offset;\n" \
"    o_fragColor = texColor;\n" \
"}\n";

static const char SHADER_FRAGMENT[] =  
"#version 330 core\n" \
"out vec4 o_fragColor;\n" \
"uniform vec4 u_color;\n" \
"\n" \
"void main()\n" \
"{\n" \
"    o_fragColor = u_color;\n" \
"}\n";

static const char SHADER_LINE_DOTTED_FRAGMENT[] = 
"#version 330 core\n" \
"uniform vec4 u_color;\n" \
"out vec4 o_fragColor;\n" \
"void main()\n" \
"{\n" \
"   float patternX = mod(gl_FragCoord.x, 10.0);\n" \
"   float patternY = mod(gl_FragCoord.y, 10.0);\n" \
"   if (patternX < 5.0 || patternY < 5.0)\n" \
"   {\n" \
"     o_fragColor = u_color;\n" \
"   }\n" \
"   else\n" \
"   {\n" \
"     discard;\n" \
"   }\n" \
"}\n";

static const char SHADER_UNIFORM_COLOR[] = "u_color";
static const char SHADER_UNIFORM_TRANSFORM[] = "u_transform";
static const char SHADER_UNIFORM_TINT[] = "u_tint";
static const char SHADER_UNIFORM_COLOR_OFFSET[] = "u_color_offset";
static const char SHADER_UNIFORM_TEXTURE[] = "u_texture";

static const ShaderData SHADER_DATA[SHADER_COUNT] = 
{
  {SHADER_VERTEX, SHADER_FRAGMENT},
  {SHADER_VERTEX, SHADER_TEXTURE_FRAGMENT},
  {SHADER_VERTEX, SHADER_LINE_DOTTED_FRAGMENT}
};